// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snippet_sample.proto

#include "snippet_sample.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace snippetsample {
PROTOBUF_CONSTEXPR SnippetRequest::SnippetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.snippet_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnippetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnippetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnippetRequestDefaultTypeInternal() {}
  union {
    SnippetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
PROTOBUF_CONSTEXPR Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._type_cached_byte_size_)*/{0}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Snippet_Filter_FilterValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Snippet_Filter_FilterValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Snippet_Filter_FilterValueDefaultTypeInternal() {}
  union {
    Snippet_Filter_FilterValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Snippet_Filter_FilterValueDefaultTypeInternal _Snippet_Filter_FilterValue_default_instance_;
PROTOBUF_CONSTEXPR Snippet_Filter::Snippet_Filter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_)*/{}
  , /*decltype(_impl_.lv_)*/nullptr
  , /*decltype(_impl_.rv_)*/nullptr
  , /*decltype(_impl_.operator__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Snippet_FilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Snippet_FilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Snippet_FilterDefaultTypeInternal() {}
  union {
    Snippet_Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Snippet_FilterDefaultTypeInternal _Snippet_Filter_default_instance_;
PROTOBUF_CONSTEXPR Snippet_Projection::Snippet_Projection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.value_type_)*/{}
  , /*decltype(_impl_._value_type_cached_byte_size_)*/{0}
  , /*decltype(_impl_.select_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Snippet_ProjectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Snippet_ProjectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Snippet_ProjectionDefaultTypeInternal() {}
  union {
    Snippet_Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Snippet_ProjectionDefaultTypeInternal _Snippet_Projection_default_instance_;
PROTOBUF_CONSTEXPR Snippet_Order::Snippet_Order(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ascending_)*/{}
  , /*decltype(_impl_._ascending_cached_byte_size_)*/{0}
  , /*decltype(_impl_.column_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Snippet_OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Snippet_OrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Snippet_OrderDefaultTypeInternal() {}
  union {
    Snippet_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Snippet_OrderDefaultTypeInternal _Snippet_Order_default_instance_;
PROTOBUF_CONSTEXPR Snippet_Dependency::Snippet_Dependency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dependency_projection_)*/{}
  , /*decltype(_impl_.dependency_filter_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Snippet_DependencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Snippet_DependencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Snippet_DependencyDefaultTypeInternal() {}
  union {
    Snippet_Dependency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Snippet_DependencyDefaultTypeInternal _Snippet_Dependency_default_instance_;
PROTOBUF_CONSTEXPR Snippet::Snippet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_name_)*/{}
  , /*decltype(_impl_.table_col_)*/{}
  , /*decltype(_impl_.table_filter_)*/{}
  , /*decltype(_impl_.table_offset_)*/{}
  , /*decltype(_impl_._table_offset_cached_byte_size_)*/{0}
  , /*decltype(_impl_.table_offlen_)*/{}
  , /*decltype(_impl_._table_offlen_cached_byte_size_)*/{0}
  , /*decltype(_impl_.table_datatype_)*/{}
  , /*decltype(_impl_._table_datatype_cached_byte_size_)*/{0}
  , /*decltype(_impl_.column_alias_)*/{}
  , /*decltype(_impl_.column_projection_)*/{}
  , /*decltype(_impl_.column_filtering_)*/{}
  , /*decltype(_impl_.group_by_)*/{}
  , /*decltype(_impl_.table_alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dependency_)*/nullptr
  , /*decltype(_impl_.order_by_)*/nullptr
  , /*decltype(_impl_.query_id_)*/0
  , /*decltype(_impl_.work_id_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnippetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnippetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnippetDefaultTypeInternal() {}
  union {
    Snippet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnippetDefaultTypeInternal _Snippet_default_instance_;
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queryid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace snippetsample
static ::_pb::Metadata file_level_metadata_snippet_5fsample_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_snippet_5fsample_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_snippet_5fsample_2eproto = nullptr;

const uint32_t TableStruct_snippet_5fsample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::SnippetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::SnippetRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::SnippetRequest, _impl_.snippet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter_FilterValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter_FilterValue, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter_FilterValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter, _impl_.lv_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter, _impl_.rv_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Filter, _impl_.extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Projection, _impl_.select_type_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Projection, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Projection, _impl_.value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Order, _impl_.ascending_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Order, _impl_.column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Dependency, _impl_.dependency_projection_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet_Dependency, _impl_.dependency_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.query_id_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.work_id_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.table_col_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.table_filter_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.dependency_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.table_offset_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.table_offlen_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.table_datatype_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.table_alias_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.column_alias_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.column_projection_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.column_filtering_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.group_by_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.order_by_),
  PROTOBUF_FIELD_OFFSET(::snippetsample::Snippet, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Request, _impl_.queryid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snippetsample::Result, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::snippetsample::SnippetRequest)},
  { 8, -1, -1, sizeof(::snippetsample::Snippet_Filter_FilterValue)},
  { 16, -1, -1, sizeof(::snippetsample::Snippet_Filter)},
  { 26, -1, -1, sizeof(::snippetsample::Snippet_Projection)},
  { 35, -1, -1, sizeof(::snippetsample::Snippet_Order)},
  { 43, -1, -1, sizeof(::snippetsample::Snippet_Dependency)},
  { 51, -1, -1, sizeof(::snippetsample::Snippet)},
  { 73, -1, -1, sizeof(::snippetsample::Request)},
  { 80, -1, -1, sizeof(::snippetsample::Result)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::snippetsample::_SnippetRequest_default_instance_._instance,
  &::snippetsample::_Snippet_Filter_FilterValue_default_instance_._instance,
  &::snippetsample::_Snippet_Filter_default_instance_._instance,
  &::snippetsample::_Snippet_Projection_default_instance_._instance,
  &::snippetsample::_Snippet_Order_default_instance_._instance,
  &::snippetsample::_Snippet_Dependency_default_instance_._instance,
  &::snippetsample::_Snippet_default_instance_._instance,
  &::snippetsample::_Request_default_instance_._instance,
  &::snippetsample::_Result_default_instance_._instance,
};

const char descriptor_table_protodef_snippet_5fsample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024snippet_sample.proto\022\rsnippetsample\"\377\002"
  "\n\016SnippetRequest\0227\n\004type\030\001 \001(\0162).snippet"
  "sample.SnippetRequest.SnippetType\022\'\n\007sni"
  "ppet\030\002 \001(\0132\026.snippetsample.Snippet\"\212\002\n\013S"
  "nippetType\022\021\n\rBASIC_SNIPPET\020\000\022\027\n\023AGGREGA"
  "TION_SNIPPET\020\001\022\020\n\014JOIN_SNIPPET\020\002\022\024\n\020SUBQ"
  "UERY_SNIPPET\020\003\022\034\n\030DEPENDENCY_EXIST_SNIPP"
  "ET\020\004\022 \n\034DEPENDENCY_NOT_EXIST_SNIPPET\020\005\022\033"
  "\n\027DEPENDENCY_OPER_SNIPPET\020\006\022\031\n\025DEPENDENC"
  "Y_IN_SNIPPET\020\007\022\022\n\016HAVING_SNIPPET\020\010\022\033\n\027LE"
  "FT_OUTER_JOIN_SNIPPET\020\t\"\340\r\n\007Snippet\022\020\n\010q"
  "uery_ID\030\001 \001(\005\022\017\n\007work_ID\030\002 \001(\005\022\022\n\ntable_"
  "name\030\003 \003(\t\022\021\n\ttable_col\030\004 \003(\t\0223\n\014table_f"
  "ilter\030\005 \003(\0132\035.snippetsample.Snippet.Filt"
  "er\0225\n\ndependency\030\006 \001(\0132!.snippetsample.S"
  "nippet.Dependency\022\024\n\014table_offset\030\007 \003(\005\022"
  "\024\n\014table_offlen\030\010 \003(\005\022\026\n\016table_datatype\030"
  "\t \003(\005\022\023\n\013table_alias\030\n \001(\t\022\024\n\014column_ali"
  "as\030\013 \003(\t\022<\n\021column_projection\030\014 \003(\0132!.sn"
  "ippetsample.Snippet.Projection\022\030\n\020column"
  "_filtering\030\r \003(\t\022\020\n\010group_by\030\016 \003(\t\022.\n\010or"
  "der_by\030\017 \001(\0132\034.snippetsample.Snippet.Ord"
  "er\022\r\n\005limit\030\020 \001(\005\032\334\004\n\006Filter\0225\n\002LV\030\001 \001(\013"
  "2).snippetsample.Snippet.Filter.FilterVa"
  "lue\0228\n\010Operator\030\002 \001(\0162&.snippetsample.Sn"
  "ippet.Filter.OperType\0225\n\002RV\030\003 \001(\0132).snip"
  "petsample.Snippet.Filter.FilterValue\0228\n\005"
  "EXTRA\030\004 \003(\0132).snippetsample.Snippet.Filt"
  "er.FilterValue\032L\n\013FilterValue\022.\n\004type\030\001 "
  "\003(\0162 .snippetsample.Snippet.ValueType\022\r\n"
  "\005value\030\002 \003(\t\"\241\002\n\010OperType\022\020\n\014KETI_DEFAUL"
  "T\020\000\022\013\n\007KETI_GE\020\001\022\013\n\007KETI_LE\020\002\022\013\n\007KETI_GT"
  "\020\003\022\013\n\007KETI_LT\020\004\022\013\n\007KETI_ET\020\005\022\013\n\007KETI_NE\020"
  "\006\022\r\n\tKETI_LIKE\020\007\022\020\n\014KETI_BETWEEN\020\010\022\013\n\007KE"
  "TI_IN\020\t\022\013\n\007KETI_IS\020\n\022\016\n\nKETI_ISNOT\020\013\022\014\n\010"
  "KETI_NOT\020\014\022\014\n\010KETI_AND\020\r\022\013\n\007KETI_OR\020\016\022\025\n"
  "\021KETI_BRACKET_OPEN\020\017\022\026\n\022KETI_BRACKET_CLO"
  "SE\020\020\022\022\n\016KETI_SUBSTRING\020\021\032\371\001\n\nProjection\022"
  "A\n\013select_type\030\001 \001(\0162,.snippetsample.Sni"
  "ppet.Projection.SelectType\022\r\n\005value\030\002 \003("
  "\t\0224\n\nvalue_type\030\003 \003(\0162 .snippetsample.Sn"
  "ippet.ValueType\"c\n\nSelectType\022\016\n\nCOLUMNN"
  "AME\020\000\022\007\n\003SUM\020\001\022\007\n\003AVG\020\002\022\t\n\005COUNT\020\003\022\r\n\tCO"
  "UNTSTAR\020\004\022\007\n\003TOP\020\005\022\007\n\003MIN\020\006\022\007\n\003MAX\020\007\032\201\001\n"
  "\005Order\022>\n\tascending\030\001 \003(\0162+.snippetsampl"
  "e.Snippet.Order.OrderDirection\022\023\n\013column"
  "_name\030\002 \003(\t\"#\n\016OrderDirection\022\007\n\003ASC\020\000\022\010"
  "\n\004DESC\020\001\032\210\001\n\nDependency\022@\n\025dependency_pr"
  "ojection\030\001 \003(\0132!.snippetsample.Snippet.P"
  "rojection\0228\n\021dependency_filter\030\002 \003(\0132\035.s"
  "nippetsample.Snippet.Filter\"\234\001\n\tValueTyp"
  "e\022\010\n\004INT8\020\000\022\t\n\005INT16\020\001\022\t\n\005INT32\020\002\022\t\n\005INT"
  "64\020\003\022\013\n\007FLOAT32\020\004\022\013\n\007FLOAT64\020\005\022\013\n\007NUMERI"
  "C\020\006\022\010\n\004DATE\020\007\022\r\n\tTIMESTAMP\020\010\022\n\n\006STRING\020\t"
  "\022\n\n\006COLUMN\020\n\022\014\n\010OPERATOR\020\013\"\032\n\007Request\022\017\n"
  "\007queryid\030\001 \001(\005\"\027\n\006Result\022\r\n\005value\030\001 \001(\t2"
  "\221\001\n\rSnippetSample\022H\n\nSetSnippet\022\035.snippe"
  "tsample.SnippetRequest\032\025.snippetsample.R"
  "esult\"\000(\0010\001\0226\n\003Run\022\026.snippetsample.Reque"
  "st\032\025.snippetsample.Result\"\000B6\n\026io.grpc.s"
  "nippet_sampleB\024snippet_sample_ProtoP\001\242\002\003"
  "SSPb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_snippet_5fsample_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_snippet_5fsample_2eproto = {
    false, false, 2451, descriptor_table_protodef_snippet_5fsample_2eproto,
    "snippet_sample.proto",
    &descriptor_table_snippet_5fsample_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_snippet_5fsample_2eproto::offsets,
    file_level_metadata_snippet_5fsample_2eproto, file_level_enum_descriptors_snippet_5fsample_2eproto,
    file_level_service_descriptors_snippet_5fsample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_snippet_5fsample_2eproto_getter() {
  return &descriptor_table_snippet_5fsample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_snippet_5fsample_2eproto(&descriptor_table_snippet_5fsample_2eproto);
namespace snippetsample {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[0];
}
bool SnippetRequest_SnippetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_SnippetType SnippetRequest::BASIC_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::AGGREGATION_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::SUBQUERY_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_EXIST_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_NOT_EXIST_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_OPER_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_IN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::HAVING_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::LEFT_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MIN;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MAX;
constexpr int SnippetRequest::SnippetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Filter_OperType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[1];
}
bool Snippet_Filter_OperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_DEFAULT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ET;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LIKE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BETWEEN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IS;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ISNOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_AND;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_OR;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BRACKET_OPEN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BRACKET_CLOSE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_SUBSTRING;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MIN;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MAX;
constexpr int Snippet_Filter::OperType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Projection_SelectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[2];
}
bool Snippet_Projection_SelectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Projection_SelectType Snippet_Projection::COLUMNNAME;
constexpr Snippet_Projection_SelectType Snippet_Projection::SUM;
constexpr Snippet_Projection_SelectType Snippet_Projection::AVG;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNT;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNTSTAR;
constexpr Snippet_Projection_SelectType Snippet_Projection::TOP;
constexpr Snippet_Projection_SelectType Snippet_Projection::MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::MAX;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MAX;
constexpr int Snippet_Projection::SelectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Order_OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[3];
}
bool Snippet_Order_OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Order_OrderDirection Snippet_Order::ASC;
constexpr Snippet_Order_OrderDirection Snippet_Order::DESC;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MIN;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MAX;
constexpr int Snippet_Order::OrderDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[4];
}
bool Snippet_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_ValueType Snippet::INT8;
constexpr Snippet_ValueType Snippet::INT16;
constexpr Snippet_ValueType Snippet::INT32;
constexpr Snippet_ValueType Snippet::INT64;
constexpr Snippet_ValueType Snippet::FLOAT32;
constexpr Snippet_ValueType Snippet::FLOAT64;
constexpr Snippet_ValueType Snippet::NUMERIC;
constexpr Snippet_ValueType Snippet::DATE;
constexpr Snippet_ValueType Snippet::TIMESTAMP;
constexpr Snippet_ValueType Snippet::STRING;
constexpr Snippet_ValueType Snippet::COLUMN;
constexpr Snippet_ValueType Snippet::OPERATOR;
constexpr Snippet_ValueType Snippet::ValueType_MIN;
constexpr Snippet_ValueType Snippet::ValueType_MAX;
constexpr int Snippet::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SnippetRequest::_Internal {
 public:
  static const ::snippetsample::Snippet& snippet(const SnippetRequest* msg);
};

const ::snippetsample::Snippet&
SnippetRequest::_Internal::snippet(const SnippetRequest* msg) {
  return *msg->_impl_.snippet_;
}
SnippetRequest::SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.SnippetRequest)
}
SnippetRequest::SnippetRequest(const SnippetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnippetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.snippet_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_snippet()) {
    _this->_impl_.snippet_ = new ::snippetsample::Snippet(*from._impl_.snippet_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:snippetsample.SnippetRequest)
}

inline void SnippetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.snippet_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnippetRequest::~SnippetRequest() {
  // @@protoc_insertion_point(destructor:snippetsample.SnippetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnippetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.snippet_;
}

void SnippetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnippetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.SnippetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.snippet_ != nullptr) {
    delete _impl_.snippet_;
  }
  _impl_.snippet_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snippetsample.SnippetRequest.SnippetType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::snippetsample::SnippetRequest_SnippetType>(val));
        } else
          goto handle_unusual;
        continue;
      // .snippetsample.Snippet snippet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snippet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.SnippetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snippetsample.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .snippetsample.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::snippet(this),
        _Internal::snippet(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.SnippetRequest)
  return target;
}

size_t SnippetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.SnippetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snippetsample.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.snippet_);
  }

  // .snippetsample.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnippetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest::GetClassData() const { return &_class_data_; }


void SnippetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnippetRequest*>(&to_msg);
  auto& from = static_cast<const SnippetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_snippet()) {
    _this->_internal_mutable_snippet()->::snippetsample::Snippet::MergeFrom(
        from._internal_snippet());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest::CopyFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest::IsInitialized() const {
  return true;
}

void SnippetRequest::InternalSwap(SnippetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest, _impl_.type_)
      + sizeof(SnippetRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest, _impl_.snippet_)>(
          reinterpret_cast<char*>(&_impl_.snippet_),
          reinterpret_cast<char*>(&other->_impl_.snippet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[0]);
}

// ===================================================================

class Snippet_Filter_FilterValue::_Internal {
 public:
};

Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Snippet.Filter.FilterValue)
}
Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(const Snippet_Filter_FilterValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snippet_Filter_FilterValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){from._impl_.type_}
    , /*decltype(_impl_._type_cached_byte_size_)*/{0}
    , decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snippetsample.Snippet.Filter.FilterValue)
}

inline void Snippet_Filter_FilterValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){arena}
    , /*decltype(_impl_._type_cached_byte_size_)*/{0}
    , decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Snippet_Filter_FilterValue::~Snippet_Filter_FilterValue() {
  // @@protoc_insertion_point(destructor:snippetsample.Snippet.Filter.FilterValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snippet_Filter_FilterValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.~RepeatedField();
  _impl_.value_.~RepeatedPtrField();
}

void Snippet_Filter_FilterValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snippet_Filter_FilterValue::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.Clear();
  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter_FilterValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .snippetsample.Snippet.ValueType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_type(static_cast<::snippetsample::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.Filter.FilterValue.value"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter_FilterValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .snippetsample.Snippet.ValueType type = 1;
  {
    int byte_size = _impl_._type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.type_, byte_size, target);
    }
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.Filter.FilterValue.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Snippet.Filter.FilterValue)
  return target;
}

size_t Snippet_Filter_FilterValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Snippet.Filter.FilterValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snippetsample.Snippet.ValueType type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.value_.size());
  for (int i = 0, n = _impl_.value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter_FilterValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snippet_Filter_FilterValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter_FilterValue::GetClassData() const { return &_class_data_; }


void Snippet_Filter_FilterValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snippet_Filter_FilterValue*>(&to_msg);
  auto& from = static_cast<const Snippet_Filter_FilterValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Snippet.Filter.FilterValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.type_.MergeFrom(from._impl_.type_);
  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter_FilterValue::CopyFrom(const Snippet_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Snippet.Filter.FilterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter_FilterValue::IsInitialized() const {
  return true;
}

void Snippet_Filter_FilterValue::InternalSwap(Snippet_Filter_FilterValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_.InternalSwap(&other->_impl_.type_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter_FilterValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[1]);
}

// ===================================================================

class Snippet_Filter::_Internal {
 public:
  static const ::snippetsample::Snippet_Filter_FilterValue& lv(const Snippet_Filter* msg);
  static const ::snippetsample::Snippet_Filter_FilterValue& rv(const Snippet_Filter* msg);
};

const ::snippetsample::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::lv(const Snippet_Filter* msg) {
  return *msg->_impl_.lv_;
}
const ::snippetsample::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::rv(const Snippet_Filter* msg) {
  return *msg->_impl_.rv_;
}
Snippet_Filter::Snippet_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Snippet.Filter)
}
Snippet_Filter::Snippet_Filter(const Snippet_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snippet_Filter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_){from._impl_.extra_}
    , decltype(_impl_.lv_){nullptr}
    , decltype(_impl_.rv_){nullptr}
    , decltype(_impl_.operator__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lv()) {
    _this->_impl_.lv_ = new ::snippetsample::Snippet_Filter_FilterValue(*from._impl_.lv_);
  }
  if (from._internal_has_rv()) {
    _this->_impl_.rv_ = new ::snippetsample::Snippet_Filter_FilterValue(*from._impl_.rv_);
  }
  _this->_impl_.operator__ = from._impl_.operator__;
  // @@protoc_insertion_point(copy_constructor:snippetsample.Snippet.Filter)
}

inline void Snippet_Filter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_){arena}
    , decltype(_impl_.lv_){nullptr}
    , decltype(_impl_.rv_){nullptr}
    , decltype(_impl_.operator__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Snippet_Filter::~Snippet_Filter() {
  // @@protoc_insertion_point(destructor:snippetsample.Snippet.Filter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snippet_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.lv_;
  if (this != internal_default_instance()) delete _impl_.rv_;
}

void Snippet_Filter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snippet_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.lv_ != nullptr) {
    delete _impl_.lv_;
  }
  _impl_.lv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rv_ != nullptr) {
    delete _impl_.rv_;
  }
  _impl_.rv_ = nullptr;
  _impl_.operator__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snippetsample.Snippet.Filter.FilterValue LV = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .snippetsample.Snippet.Filter.OperType Operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::snippetsample::Snippet_Filter_OperType>(val));
        } else
          goto handle_unusual;
        continue;
      // .snippetsample.Snippet.Filter.FilterValue RV = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .snippetsample.Snippet.Filter.FilterValue EXTRA = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snippetsample.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lv(this),
        _Internal::lv(this).GetCachedSize(), target, stream);
  }

  // .snippetsample.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  // .snippetsample.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rv(this),
        _Internal::rv(this).GetCachedSize(), target, stream);
  }

  // repeated .snippetsample.Snippet.Filter.FilterValue EXTRA = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Snippet.Filter)
  return target;
}

size_t Snippet_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Snippet.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snippetsample.Snippet.Filter.FilterValue EXTRA = 4;
  total_size += 1UL * this->_internal_extra_size();
  for (const auto& msg : this->_impl_.extra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .snippetsample.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lv_);
  }

  // .snippetsample.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rv_);
  }

  // .snippetsample.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snippet_Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter::GetClassData() const { return &_class_data_; }


void Snippet_Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snippet_Filter*>(&to_msg);
  auto& from = static_cast<const Snippet_Filter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Snippet.Filter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_.MergeFrom(from._impl_.extra_);
  if (from._internal_has_lv()) {
    _this->_internal_mutable_lv()->::snippetsample::Snippet_Filter_FilterValue::MergeFrom(
        from._internal_lv());
  }
  if (from._internal_has_rv()) {
    _this->_internal_mutable_rv()->::snippetsample::Snippet_Filter_FilterValue::MergeFrom(
        from._internal_rv());
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter::CopyFrom(const Snippet_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Snippet.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter::IsInitialized() const {
  return true;
}

void Snippet_Filter::InternalSwap(Snippet_Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extra_.InternalSwap(&other->_impl_.extra_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet_Filter, _impl_.operator__)
      + sizeof(Snippet_Filter::_impl_.operator__)
      - PROTOBUF_FIELD_OFFSET(Snippet_Filter, _impl_.lv_)>(
          reinterpret_cast<char*>(&_impl_.lv_),
          reinterpret_cast<char*>(&other->_impl_.lv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[2]);
}

// ===================================================================

class Snippet_Projection::_Internal {
 public:
};

Snippet_Projection::Snippet_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Snippet.Projection)
}
Snippet_Projection::Snippet_Projection(const Snippet_Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snippet_Projection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.value_type_){from._impl_.value_type_}
    , /*decltype(_impl_._value_type_cached_byte_size_)*/{0}
    , decltype(_impl_.select_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.select_type_ = from._impl_.select_type_;
  // @@protoc_insertion_point(copy_constructor:snippetsample.Snippet.Projection)
}

inline void Snippet_Projection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , decltype(_impl_.value_type_){arena}
    , /*decltype(_impl_._value_type_cached_byte_size_)*/{0}
    , decltype(_impl_.select_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Snippet_Projection::~Snippet_Projection() {
  // @@protoc_insertion_point(destructor:snippetsample.Snippet.Projection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snippet_Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
  _impl_.value_type_.~RepeatedField();
}

void Snippet_Projection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snippet_Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.value_type_.Clear();
  _impl_.select_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Projection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snippetsample.Snippet.Projection.SelectType select_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_select_type(static_cast<::snippetsample::Snippet_Projection_SelectType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.Projection.value"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .snippetsample.Snippet.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_value_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_value_type(static_cast<::snippetsample::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Projection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .snippetsample.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_select_type(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.Projection.value");
    target = stream->WriteString(2, s, target);
  }

  // repeated .snippetsample.Snippet.ValueType value_type = 3;
  {
    int byte_size = _impl_._value_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, _impl_.value_type_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Snippet.Projection)
  return target;
}

size_t Snippet_Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Snippet.Projection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.value_.size());
  for (int i = 0, n = _impl_.value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.value_.Get(i));
  }

  // repeated .snippetsample.Snippet.ValueType value_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_value_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_value_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .snippetsample.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_select_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Projection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snippet_Projection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Projection::GetClassData() const { return &_class_data_; }


void Snippet_Projection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snippet_Projection*>(&to_msg);
  auto& from = static_cast<const Snippet_Projection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Snippet.Projection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_impl_.value_type_.MergeFrom(from._impl_.value_type_);
  if (from._internal_select_type() != 0) {
    _this->_internal_set_select_type(from._internal_select_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Projection::CopyFrom(const Snippet_Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Snippet.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Projection::IsInitialized() const {
  return true;
}

void Snippet_Projection::InternalSwap(Snippet_Projection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  _impl_.value_type_.InternalSwap(&other->_impl_.value_type_);
  swap(_impl_.select_type_, other->_impl_.select_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Projection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[3]);
}

// ===================================================================

class Snippet_Order::_Internal {
 public:
};

Snippet_Order::Snippet_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Snippet.Order)
}
Snippet_Order::Snippet_Order(const Snippet_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snippet_Order* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ascending_){from._impl_.ascending_}
    , /*decltype(_impl_._ascending_cached_byte_size_)*/{0}
    , decltype(_impl_.column_name_){from._impl_.column_name_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snippetsample.Snippet.Order)
}

inline void Snippet_Order::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ascending_){arena}
    , /*decltype(_impl_._ascending_cached_byte_size_)*/{0}
    , decltype(_impl_.column_name_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Snippet_Order::~Snippet_Order() {
  // @@protoc_insertion_point(destructor:snippetsample.Snippet.Order)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snippet_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ascending_.~RepeatedField();
  _impl_.column_name_.~RepeatedPtrField();
}

void Snippet_Order::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snippet_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Snippet.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ascending_.Clear();
  _impl_.column_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Order::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .snippetsample.Snippet.Order.OrderDirection ascending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ascending(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ascending(static_cast<::snippetsample::Snippet_Order_OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.Order.column_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Snippet.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .snippetsample.Snippet.Order.OrderDirection ascending = 1;
  {
    int byte_size = _impl_._ascending_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.ascending_, byte_size, target);
    }
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.Order.column_name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Snippet.Order)
  return target;
}

size_t Snippet_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Snippet.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snippetsample.Snippet.Order.OrderDirection ascending = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ascending_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_ascending(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ascending_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_name_.size());
  for (int i = 0, n = _impl_.column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snippet_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Order::GetClassData() const { return &_class_data_; }


void Snippet_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snippet_Order*>(&to_msg);
  auto& from = static_cast<const Snippet_Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Snippet.Order)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ascending_.MergeFrom(from._impl_.ascending_);
  _this->_impl_.column_name_.MergeFrom(from._impl_.column_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Order::CopyFrom(const Snippet_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Snippet.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Order::IsInitialized() const {
  return true;
}

void Snippet_Order::InternalSwap(Snippet_Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ascending_.InternalSwap(&other->_impl_.ascending_);
  _impl_.column_name_.InternalSwap(&other->_impl_.column_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[4]);
}

// ===================================================================

class Snippet_Dependency::_Internal {
 public:
};

Snippet_Dependency::Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Snippet.Dependency)
}
Snippet_Dependency::Snippet_Dependency(const Snippet_Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snippet_Dependency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dependency_projection_){from._impl_.dependency_projection_}
    , decltype(_impl_.dependency_filter_){from._impl_.dependency_filter_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snippetsample.Snippet.Dependency)
}

inline void Snippet_Dependency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dependency_projection_){arena}
    , decltype(_impl_.dependency_filter_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Snippet_Dependency::~Snippet_Dependency() {
  // @@protoc_insertion_point(destructor:snippetsample.Snippet.Dependency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snippet_Dependency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dependency_projection_.~RepeatedPtrField();
  _impl_.dependency_filter_.~RepeatedPtrField();
}

void Snippet_Dependency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snippet_Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dependency_projection_.Clear();
  _impl_.dependency_filter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Dependency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .snippetsample.Snippet.Projection dependency_projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .snippetsample.Snippet.Filter dependency_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Dependency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .snippetsample.Snippet.Projection dependency_projection = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dependency_projection_size()); i < n; i++) {
    const auto& repfield = this->_internal_dependency_projection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .snippetsample.Snippet.Filter dependency_filter = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dependency_filter_size()); i < n; i++) {
    const auto& repfield = this->_internal_dependency_filter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Snippet.Dependency)
  return target;
}

size_t Snippet_Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Snippet.Dependency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snippetsample.Snippet.Projection dependency_projection = 1;
  total_size += 1UL * this->_internal_dependency_projection_size();
  for (const auto& msg : this->_impl_.dependency_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .snippetsample.Snippet.Filter dependency_filter = 2;
  total_size += 1UL * this->_internal_dependency_filter_size();
  for (const auto& msg : this->_impl_.dependency_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Dependency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snippet_Dependency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Dependency::GetClassData() const { return &_class_data_; }


void Snippet_Dependency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snippet_Dependency*>(&to_msg);
  auto& from = static_cast<const Snippet_Dependency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Snippet.Dependency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dependency_projection_.MergeFrom(from._impl_.dependency_projection_);
  _this->_impl_.dependency_filter_.MergeFrom(from._impl_.dependency_filter_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Dependency::CopyFrom(const Snippet_Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Snippet.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Dependency::IsInitialized() const {
  return true;
}

void Snippet_Dependency::InternalSwap(Snippet_Dependency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dependency_projection_.InternalSwap(&other->_impl_.dependency_projection_);
  _impl_.dependency_filter_.InternalSwap(&other->_impl_.dependency_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Dependency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[5]);
}

// ===================================================================

class Snippet::_Internal {
 public:
  static const ::snippetsample::Snippet_Dependency& dependency(const Snippet* msg);
  static const ::snippetsample::Snippet_Order& order_by(const Snippet* msg);
};

const ::snippetsample::Snippet_Dependency&
Snippet::_Internal::dependency(const Snippet* msg) {
  return *msg->_impl_.dependency_;
}
const ::snippetsample::Snippet_Order&
Snippet::_Internal::order_by(const Snippet* msg) {
  return *msg->_impl_.order_by_;
}
Snippet::Snippet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Snippet)
}
Snippet::Snippet(const Snippet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snippet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){from._impl_.table_name_}
    , decltype(_impl_.table_col_){from._impl_.table_col_}
    , decltype(_impl_.table_filter_){from._impl_.table_filter_}
    , decltype(_impl_.table_offset_){from._impl_.table_offset_}
    , /*decltype(_impl_._table_offset_cached_byte_size_)*/{0}
    , decltype(_impl_.table_offlen_){from._impl_.table_offlen_}
    , /*decltype(_impl_._table_offlen_cached_byte_size_)*/{0}
    , decltype(_impl_.table_datatype_){from._impl_.table_datatype_}
    , /*decltype(_impl_._table_datatype_cached_byte_size_)*/{0}
    , decltype(_impl_.column_alias_){from._impl_.column_alias_}
    , decltype(_impl_.column_projection_){from._impl_.column_projection_}
    , decltype(_impl_.column_filtering_){from._impl_.column_filtering_}
    , decltype(_impl_.group_by_){from._impl_.group_by_}
    , decltype(_impl_.table_alias_){}
    , decltype(_impl_.dependency_){nullptr}
    , decltype(_impl_.order_by_){nullptr}
    , decltype(_impl_.query_id_){}
    , decltype(_impl_.work_id_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_alias().empty()) {
    _this->_impl_.table_alias_.Set(from._internal_table_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dependency()) {
    _this->_impl_.dependency_ = new ::snippetsample::Snippet_Dependency(*from._impl_.dependency_);
  }
  if (from._internal_has_order_by()) {
    _this->_impl_.order_by_ = new ::snippetsample::Snippet_Order(*from._impl_.order_by_);
  }
  ::memcpy(&_impl_.query_id_, &from._impl_.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.query_id_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:snippetsample.Snippet)
}

inline void Snippet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_name_){arena}
    , decltype(_impl_.table_col_){arena}
    , decltype(_impl_.table_filter_){arena}
    , decltype(_impl_.table_offset_){arena}
    , /*decltype(_impl_._table_offset_cached_byte_size_)*/{0}
    , decltype(_impl_.table_offlen_){arena}
    , /*decltype(_impl_._table_offlen_cached_byte_size_)*/{0}
    , decltype(_impl_.table_datatype_){arena}
    , /*decltype(_impl_._table_datatype_cached_byte_size_)*/{0}
    , decltype(_impl_.column_alias_){arena}
    , decltype(_impl_.column_projection_){arena}
    , decltype(_impl_.column_filtering_){arena}
    , decltype(_impl_.group_by_){arena}
    , decltype(_impl_.table_alias_){}
    , decltype(_impl_.dependency_){nullptr}
    , decltype(_impl_.order_by_){nullptr}
    , decltype(_impl_.query_id_){0}
    , decltype(_impl_.work_id_){0}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Snippet::~Snippet() {
  // @@protoc_insertion_point(destructor:snippetsample.Snippet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snippet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.~RepeatedPtrField();
  _impl_.table_col_.~RepeatedPtrField();
  _impl_.table_filter_.~RepeatedPtrField();
  _impl_.table_offset_.~RepeatedField();
  _impl_.table_offlen_.~RepeatedField();
  _impl_.table_datatype_.~RepeatedField();
  _impl_.column_alias_.~RepeatedPtrField();
  _impl_.column_projection_.~RepeatedPtrField();
  _impl_.column_filtering_.~RepeatedPtrField();
  _impl_.group_by_.~RepeatedPtrField();
  _impl_.table_alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dependency_;
  if (this != internal_default_instance()) delete _impl_.order_by_;
}

void Snippet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snippet::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Snippet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_name_.Clear();
  _impl_.table_col_.Clear();
  _impl_.table_filter_.Clear();
  _impl_.table_offset_.Clear();
  _impl_.table_offlen_.Clear();
  _impl_.table_datatype_.Clear();
  _impl_.column_alias_.Clear();
  _impl_.column_projection_.Clear();
  _impl_.column_filtering_.Clear();
  _impl_.group_by_.Clear();
  _impl_.table_alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.dependency_ != nullptr) {
    delete _impl_.dependency_;
  }
  _impl_.dependency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.order_by_ != nullptr) {
    delete _impl_.order_by_;
  }
  _impl_.order_by_ = nullptr;
  ::memset(&_impl_.query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.query_id_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 query_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.table_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string table_col = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_col();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.table_col"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .snippetsample.Snippet.Filter table_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .snippetsample.Snippet.Dependency dependency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_table_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offlen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offlen(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_table_offlen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_datatype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_datatype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_table_datatype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_alias = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_table_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.table_alias"));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_alias = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_alias();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.column_alias"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .snippetsample.Snippet.Projection column_projection = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_filtering = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_filtering();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.column_filtering"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Snippet.group_by"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .snippetsample.Snippet.Order order_by = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Snippet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 query_ID = 1;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_query_id(), target);
  }

  // int32 work_ID = 2;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_work_id(), target);
  }

  // repeated string table_name = 3;
  for (int i = 0, n = this->_internal_table_name_size(); i < n; i++) {
    const auto& s = this->_internal_table_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.table_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated string table_col = 4;
  for (int i = 0, n = this->_internal_table_col_size(); i < n; i++) {
    const auto& s = this->_internal_table_col(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.table_col");
    target = stream->WriteString(4, s, target);
  }

  // repeated .snippetsample.Snippet.Filter table_filter = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_filter_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_filter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .snippetsample.Snippet.Dependency dependency = 6;
  if (this->_internal_has_dependency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::dependency(this),
        _Internal::dependency(this).GetCachedSize(), target, stream);
  }

  // repeated int32 table_offset = 7;
  {
    int byte_size = _impl_._table_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_table_offset(), byte_size, target);
    }
  }

  // repeated int32 table_offlen = 8;
  {
    int byte_size = _impl_._table_offlen_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_table_offlen(), byte_size, target);
    }
  }

  // repeated int32 table_datatype = 9;
  {
    int byte_size = _impl_._table_datatype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_table_datatype(), byte_size, target);
    }
  }

  // string table_alias = 10;
  if (!this->_internal_table_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_alias().data(), static_cast<int>(this->_internal_table_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.table_alias");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_table_alias(), target);
  }

  // repeated string column_alias = 11;
  for (int i = 0, n = this->_internal_column_alias_size(); i < n; i++) {
    const auto& s = this->_internal_column_alias(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.column_alias");
    target = stream->WriteString(11, s, target);
  }

  // repeated .snippetsample.Snippet.Projection column_projection = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_projection_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_projection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string column_filtering = 13;
  for (int i = 0, n = this->_internal_column_filtering_size(); i < n; i++) {
    const auto& s = this->_internal_column_filtering(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.column_filtering");
    target = stream->WriteString(13, s, target);
  }

  // repeated string group_by = 14;
  for (int i = 0, n = this->_internal_group_by_size(); i < n; i++) {
    const auto& s = this->_internal_group_by(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Snippet.group_by");
    target = stream->WriteString(14, s, target);
  }

  // .snippetsample.Snippet.Order order_by = 15;
  if (this->_internal_has_order_by()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::order_by(this),
        _Internal::order_by(this).GetCachedSize(), target, stream);
  }

  // int32 limit = 16;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Snippet)
  return target;
}

size_t Snippet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Snippet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string table_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.table_name_.size());
  for (int i = 0, n = _impl_.table_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.table_name_.Get(i));
  }

  // repeated string table_col = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.table_col_.size());
  for (int i = 0, n = _impl_.table_col_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.table_col_.Get(i));
  }

  // repeated .snippetsample.Snippet.Filter table_filter = 5;
  total_size += 1UL * this->_internal_table_filter_size();
  for (const auto& msg : this->_impl_.table_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 table_offset = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.table_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._table_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_offlen = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.table_offlen_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._table_offlen_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_datatype = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.table_datatype_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._table_datatype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_alias = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_alias_.size());
  for (int i = 0, n = _impl_.column_alias_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_alias_.Get(i));
  }

  // repeated .snippetsample.Snippet.Projection column_projection = 12;
  total_size += 1UL * this->_internal_column_projection_size();
  for (const auto& msg : this->_impl_.column_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string column_filtering = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_filtering_.size());
  for (int i = 0, n = _impl_.column_filtering_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_filtering_.Get(i));
  }

  // repeated string group_by = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.group_by_.size());
  for (int i = 0, n = _impl_.group_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.group_by_.Get(i));
  }

  // string table_alias = 10;
  if (!this->_internal_table_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_alias());
  }

  // .snippetsample.Snippet.Dependency dependency = 6;
  if (this->_internal_has_dependency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dependency_);
  }

  // .snippetsample.Snippet.Order order_by = 15;
  if (this->_internal_has_order_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_by_);
  }

  // int32 query_ID = 1;
  if (this->_internal_query_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_ID = 2;
  if (this->_internal_work_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  // int32 limit = 16;
  if (this->_internal_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snippet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet::GetClassData() const { return &_class_data_; }


void Snippet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snippet*>(&to_msg);
  auto& from = static_cast<const Snippet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Snippet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_name_.MergeFrom(from._impl_.table_name_);
  _this->_impl_.table_col_.MergeFrom(from._impl_.table_col_);
  _this->_impl_.table_filter_.MergeFrom(from._impl_.table_filter_);
  _this->_impl_.table_offset_.MergeFrom(from._impl_.table_offset_);
  _this->_impl_.table_offlen_.MergeFrom(from._impl_.table_offlen_);
  _this->_impl_.table_datatype_.MergeFrom(from._impl_.table_datatype_);
  _this->_impl_.column_alias_.MergeFrom(from._impl_.column_alias_);
  _this->_impl_.column_projection_.MergeFrom(from._impl_.column_projection_);
  _this->_impl_.column_filtering_.MergeFrom(from._impl_.column_filtering_);
  _this->_impl_.group_by_.MergeFrom(from._impl_.group_by_);
  if (!from._internal_table_alias().empty()) {
    _this->_internal_set_table_alias(from._internal_table_alias());
  }
  if (from._internal_has_dependency()) {
    _this->_internal_mutable_dependency()->::snippetsample::Snippet_Dependency::MergeFrom(
        from._internal_dependency());
  }
  if (from._internal_has_order_by()) {
    _this->_internal_mutable_order_by()->::snippetsample::Snippet_Order::MergeFrom(
        from._internal_order_by());
  }
  if (from._internal_query_id() != 0) {
    _this->_internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _this->_internal_set_work_id(from._internal_work_id());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet::CopyFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Snippet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet::IsInitialized() const {
  return true;
}

void Snippet::InternalSwap(Snippet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_name_.InternalSwap(&other->_impl_.table_name_);
  _impl_.table_col_.InternalSwap(&other->_impl_.table_col_);
  _impl_.table_filter_.InternalSwap(&other->_impl_.table_filter_);
  _impl_.table_offset_.InternalSwap(&other->_impl_.table_offset_);
  _impl_.table_offlen_.InternalSwap(&other->_impl_.table_offlen_);
  _impl_.table_datatype_.InternalSwap(&other->_impl_.table_datatype_);
  _impl_.column_alias_.InternalSwap(&other->_impl_.column_alias_);
  _impl_.column_projection_.InternalSwap(&other->_impl_.column_projection_);
  _impl_.column_filtering_.InternalSwap(&other->_impl_.column_filtering_);
  _impl_.group_by_.InternalSwap(&other->_impl_.group_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_alias_, lhs_arena,
      &other->_impl_.table_alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet, _impl_.limit_)
      + sizeof(Snippet::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(Snippet, _impl_.dependency_)>(
          reinterpret_cast<char*>(&_impl_.dependency_),
          reinterpret_cast<char*>(&other->_impl_.dependency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[6]);
}

// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queryid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.queryid_ = from._impl_.queryid_;
  // @@protoc_insertion_point(copy_constructor:snippetsample.Request)
}

inline void Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queryid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:snippetsample.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queryid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 queryid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.queryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queryid = 1;
  if (this->_internal_queryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_queryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 queryid = 1;
  if (this->_internal_queryid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_queryid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_queryid() != 0) {
    _this->_internal_set_queryid(from._internal_queryid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.queryid_, other->_impl_.queryid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[7]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:snippetsample.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:snippetsample.Result)
}

inline void Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:snippetsample.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:snippetsample.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "snippetsample.Result.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snippetsample.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snippetsample.Result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snippetsample.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snippetsample.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:snippetsample.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snippetsample.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace snippetsample
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snippetsample::SnippetRequest*
Arena::CreateMaybeMessage< ::snippetsample::SnippetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::SnippetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Snippet_Filter_FilterValue*
Arena::CreateMaybeMessage< ::snippetsample::Snippet_Filter_FilterValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Snippet_Filter_FilterValue >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Snippet_Filter*
Arena::CreateMaybeMessage< ::snippetsample::Snippet_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Snippet_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Snippet_Projection*
Arena::CreateMaybeMessage< ::snippetsample::Snippet_Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Snippet_Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Snippet_Order*
Arena::CreateMaybeMessage< ::snippetsample::Snippet_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Snippet_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Snippet_Dependency*
Arena::CreateMaybeMessage< ::snippetsample::Snippet_Dependency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Snippet_Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Snippet*
Arena::CreateMaybeMessage< ::snippetsample::Snippet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Snippet >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Request*
Arena::CreateMaybeMessage< ::snippetsample::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::snippetsample::Result*
Arena::CreateMaybeMessage< ::snippetsample::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snippetsample::Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
